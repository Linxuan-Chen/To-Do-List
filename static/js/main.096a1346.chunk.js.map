{"version":3,"sources":["components/Header/index.js","components/Input/index.js","components/Modal/CheckModal/index.js","components/Modal/EditModel/index.js","components/Modal/DeleteModal/index.js","components/ToDoList/ToDoItems/index.js","components/ToDoList/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","setIsInputShow","isInputShow","className","onClick","Input","addList","useState","inputValue","setInputValue","type","placeholder","value","onChange","e","target","Modal","title","currentTask","getTime","id","tabIndex","aria-labelledby","aria-hidden","data-dismiss","aria-label","timestamp","task","isComplete","completeTimestamp","EditModel","editboxHandler","editValue","setEditValue","DeleteModal","deleteHandler","ToDoItems","changeIsComplete","changCurrentTask","changeTaskContent","deleteTask","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","name","checked","style","textDecoration","role","data-toggle","data-target","ariaLabelledby","ToDoList","toDoList","setToDoList","setCurrentTask","map","item","filter","index","key","App","useEffect","toDoData","JSON","parse","localStorage","getItem","setItem","stringify","window","confirm","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.096a1346.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./index.scss\";\r\n\r\nexport default function Header(props) {\r\n\r\n  const { setIsInputShow, isInputShow } = props;\r\n\r\n  /**\r\n   * @description: Change isInputShow flag to opposite when plus button is triggered\r\n   */  \r\n  const plusButtonClickHandler = () => {\r\n    setIsInputShow(!isInputShow)\r\n  };\r\n\r\n  return (\r\n    <header className=\"header container\">\r\n      <div className=\"row bg-primary\">\r\n        <div className=\"col-10 text-center text-white p-0\">To Do list</div>\r\n        <div className=\"col-2 p-0 text-right pr-3\">\r\n          <div className=\"btn pt-0 text-white text-center\" onClick={plusButtonClickHandler}>\r\n            &#43;\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./index.scss\";\r\n\r\nexport default function Input(props) {\r\n\r\n  const { addList, setIsInputShow } = props;\r\n\r\n  // Bind value in input box to state inputValue\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const inputChangeHandler = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n\r\n  /**\r\n   * @description: Run when add button is clicked\r\n   */\r\n  const addButtonClickHandler = () => {\r\n    // Pass inputValue to addList method in App\r\n    addList(inputValue);\r\n    // Initialize inputValue\r\n    setInputValue('');\r\n    // Close input box when add is clicked\r\n    setIsInputShow(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container input\">\r\n        <div className=\"row mt-1\">\r\n          {/* input box starts */}\r\n          <div className=\"col-10 p-0 pt-1 pl-1\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"plus-input\"\r\n              placeholder=\"Please enter a task\"\r\n              value={inputValue}\r\n              onChange={inputChangeHandler}\r\n            />\r\n          </div>\r\n          {/* input box ends */}\r\n\r\n          {/* Add button starts */}\r\n          <div className=\"col-2 text-right p-0 pl-1\">\r\n            <div className=\"btn btn-success\" onClick={addButtonClickHandler}>Add</div>\r\n          </div>\r\n          {/* Add button ends */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Modal(props) {\r\n\r\n  const {\r\n    title,\r\n    currentTask,\r\n    getTime\r\n  } = props;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"modal fade\"\r\n        id=\"checkModal\"\r\n        tabIndex=\"-1\"\r\n        aria-labelledby=\"checkModalLabel\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <div className=\"modal-dialog\">\r\n          <div className=\"modal-content\">\r\n            {/* modal header starts */}\r\n            <div className=\"modal-header text-center\">\r\n              <h5 className=\"modal-title\" >\r\n                {title}\r\n              </h5>\r\n              <button\r\n                type=\"button\"\r\n                className=\"close\"\r\n                data-dismiss=\"modal\"\r\n                aria-label=\"Close\"\r\n              >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </button>\r\n            </div>\r\n             {/* modal header ends */}\r\n\r\n            <div className=\"modal-body text-left\">\r\n              {/* Task time starts */}\r\n              <p className=\"task-time\">\r\n                <span>Time Added: </span>\r\n                {getTime(currentTask.timestamp)}\r\n              </p>\r\n              {/* Task time ends */}\r\n\r\n               {/*task content starts */}\r\n              <p className=\"task-content\">\r\n                <span>Task: </span>\r\n                {currentTask.task}\r\n              </p>\r\n               {/*task content ends */}\r\n\r\n               {/* task status starts */}\r\n              <p className=\"task-status\">\r\n                <span>Status: </span>\r\n                {currentTask.isComplete ? \"Complete\" : \"In Progress\"}\r\n              </p>\r\n              {/* if isComplete flag is true, run getTime method to parse the timestamp */}\r\n                  {\r\n                      currentTask.isComplete? \r\n                      <div className=\"task-completeTime\">\r\n                      <span>Complete Time: </span>\r\n                      {getTime(currentTask.completeTimestamp)}\r\n                      </div>: ''\r\n                  }\r\n            </div>\r\n            {/* task status ends */}\r\n            <div className=\"modal-footer\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-dismiss=\"modal\"\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function EditModel(props) {\r\n  const { editboxHandler, title, currentTask, getTime } = props;\r\n  // Bind value in input box to editValue state\r\n  const [editValue, setEditValue] = useState(\"\");\r\n\r\n  return (\r\n    <div\r\n      className=\"modal fade\"\r\n      id=\"editModal\"\r\n      tabIndex=\"-1\"\r\n      aria-labelledby=\"editModalLabel\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      <div className=\"modal-dialog\">\r\n        <div className=\"modal-content\">\r\n          {/* modal header starts */}\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\" id=\"editModalLabel\">\r\n              {title}\r\n            </h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              data-dismiss=\"modal\"\r\n              aria-label=\"Close\"\r\n            >\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          {/* modal header ends */}\r\n          <div className=\"modal-body text-left\">\r\n            {/* Time added */}\r\n            <div className=\"edit-tiem\">\r\n              <span>Time Added: </span>{\" \"}\r\n              <span>{getTime(currentTask.timestamp)}</span>\r\n            </div>\r\n          {/* textarea for editing task content */}\r\n            <textarea\r\n              className=\"mt-2\"\r\n              value={editValue}\r\n              placeholder=\"Please input task modified\"\r\n              onChange={(e) => {\r\n                setEditValue(e.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            {/* close button */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n            >\r\n              Close\r\n            </button>\r\n            {/* submit button to store the data to toDoList state */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-dismiss=\"modal\"\r\n              onClick={() => {\r\n                // change currentTask and pass the value to ToDoItem when button is clicked\r\n                editboxHandler(currentTask.timestamp, editValue);\r\n                // reset editValue\r\n                setEditValue('');\r\n              }}\r\n            >\r\n              Save changes\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","\r\nimport React from 'react'\r\n\r\nexport default function DeleteModal(props) {\r\n\r\n    const { title, deleteHandler, currentTask } = props;\r\n\r\n    return (\r\n        <div\r\n            className=\"modal fade\"\r\n            id=\"deleteModal\"\r\n            tabIndex=\"-1\"\r\n            aria-labelledby=\"deleteModalLabel\"\r\n            aria-hidden=\"true\"\r\n        >\r\n            <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                    {/* set modal header to danger color */}\r\n                    <div className=\"modal-header bg-danger text-white\">\r\n                        <h5 className=\"modal-title\" id=\"deleteModalLabel\">\r\n                            {title}\r\n                        </h5>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"close\"\r\n                            data-dismiss=\"modal\"\r\n                            aria-label=\"Close\"\r\n                        >\r\n                            <span className=\"text-white\" aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    {/* modal header ends */}\r\n                    {/* modal body starts */}\r\n                    <div className=\"modal-body text-left\">\r\n                        <p className=\"pt-3\">You can't rollback if you click delete!</p>\r\n                    </div>\r\n                    {/* modal body ends */}\r\n                    <div className=\"modal-footer\">\r\n                        {/* when delete button is clicked, close the modal and delete the data */}\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-secondary\"\r\n                            data-dismiss=\"modal\"\r\n                            onClick={\r\n                                () => {\r\n                                    deleteHandler(currentTask.timestamp)\r\n                                }\r\n                            }\r\n                        >\r\n                            Delete\r\n              </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nimport CheckModal from \"../../Modal/CheckModal\";\r\nimport EditModel from \"../../Modal/EditModel\";\r\nimport DeleteModal from \"../../Modal/DeleteModal\";\r\n\r\nexport default function ToDoItems(props) {\r\n  const { task, changeIsComplete, currentTask, changCurrentTask, changeTaskContent, deleteTask } = props;\r\n\r\n  /**\r\n   * @description: Pass task timestamp back to parent component\r\n   */\r\n\r\n  const checkboxChangeHandler = () => {\r\n    changeIsComplete(task.timestamp);\r\n  };\r\n\r\n  /**\r\n   * @description: Handler for save button in edit modal\r\n   * @param {Number} timestamp Timestamp of current task\r\n   * @param {String} editValue Value in textarea box when trying to edit the task\r\n   */\r\n  const editboxHandler = (timestamp, editValue) => {\r\n    changeTaskContent(timestamp, editValue);\r\n  }\r\n\r\n  /**\r\n   * @description: Handler for delete button in delete modal\r\n   * @param {Number} timestamp Timestamp of current task\r\n   */\r\n  const deleteHandler = (timestamp) => {\r\n    deleteTask(timestamp);\r\n  }\r\n\r\n  /**\r\n   * @description: Parse timestamp to regular time format\r\n   * @param {Number} timestamp Timestamp of current task\r\n   */\r\n  const getTime = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\r\n    const minites = date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\r\n    const seconds = date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds();\r\n    return (\r\n      year +\r\n      \"-\" +\r\n      month +\r\n      \"-\" +\r\n      day +\r\n      \" \" +\r\n      hours +\r\n      \":\" +\r\n      minites +\r\n      \":\" +\r\n      seconds\r\n    );\r\n  };\r\n\r\n  return (\r\n    <li className=\"row shadow-sm mt-2\">\r\n      {/* checkbox starts */}\r\n      <div className=\"col-2 col-lg-2 pt-3\">\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"isComplete\"\r\n          id=\"isComplete\"\r\n          checked={task.isComplete}\r\n          onChange={checkboxChangeHandler}\r\n        />\r\n      </div>\r\n      {/* checkbox ends */}\r\n\r\n      {/* task content starts */}\r\n      <div className=\"col-10 col-lg-6 text-center pt-3 text-truncate\">\r\n        <span\r\n          style={{\r\n            textDecoration: task.isComplete ? \"line-through\" : \"none\",\r\n          }}\r\n        >\r\n          {task.task}\r\n        </span>\r\n      </div>\r\n      {/* task content ends */}\r\n\r\n      <div className=\"col-12 col-lg-4 text-right pr-0 pb-2 pt-2\">\r\n        {/* checkModal starts */}\r\n        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n          <button\r\n            className=\"btn btn-info mr-2 my-1\"\r\n            type=\"button\"\r\n            data-toggle=\"modal\"\r\n            data-target=\"#checkModal\"\r\n            onClick={() => {\r\n              changCurrentTask(task.timestamp);\r\n            }}\r\n          >\r\n            Info\r\n          </button>\r\n          <CheckModal\r\n            ariaLabelledby=\"checkModal\"\r\n            title=\"Task Info\"\r\n            currentTask={currentTask}\r\n            getTime={getTime}\r\n          />\r\n\r\n          {/* checkModal ends */}\r\n\r\n          {/* editModal starts */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning mx-2 my-1\"\r\n            data-toggle=\"modal\"\r\n            data-target=\"#editModal\"\r\n            onClick={() => {\r\n              changCurrentTask(task.timestamp);\r\n            }}\r\n          >\r\n            Edit\r\n          </button>\r\n          <EditModel editboxHandler={editboxHandler} currentTask={currentTask} title=\"Edit Task\" getTime={getTime} />\r\n          {/* edit modal ends */}\r\n\r\n          {/* delete modal starts */}\r\n          <button type=\"button\" className=\"btn btn-danger ml-2 my-1\" data-toggle=\"modal\"\r\n            data-target=\"#deleteModal\" onClick={() => {\r\n              changCurrentTask(task.timestamp);\r\n            }}>\r\n\r\n            Delete\r\n          </button>\r\n          <DeleteModal title=\"Are You Sure?\" currentTask={currentTask} deleteHandler={deleteHandler} />\r\n          {/* delete modal starts */}\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport ToDoItems from \"./ToDoItems\";\r\n\r\nexport default function ToDoList(props) {\r\n  const { toDoList, setToDoList } = props;\r\n\r\n  const [currentTask, setCurrentTask] = useState({});\r\n\r\n\r\n  /**\r\n   * @description: Change isComplete flag to opposite status when checkbox is checked\r\n   * @param {Number} timestamp Timestamp of current task\r\n   */\r\n  const changeIsComplete = (timestamp) => {\r\n    setToDoList(\r\n      toDoList.map(\r\n        (item) => {\r\n          if (item.timestamp === timestamp) {\r\n            item.isComplete = !item.isComplete;\r\n            item.completeTimestamp = new Date().getTime();\r\n          }\r\n          return item;\r\n        })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * @description: Find the task obj when timestamp fits, then replace the task content with editValue\r\n   * @param {Number} timestamp Timestamp of current task\r\n   * @param {String} editValue Value in textarea in edit modal\r\n   */\r\n  const changeTaskContent = (timestamp, editValue) => {\r\n    setToDoList(\r\n      toDoList.map(\r\n        (item) => {\r\n          if (item.timestamp === timestamp) {\r\n            item.task = editValue;\r\n          }\r\n          return item\r\n        }\r\n      )\r\n    )\r\n  }\r\n  /**\r\n   * @description: Change currentTask according to timestamp passed by button actions\r\n   * @param {Number} timestamp Timestamp of current task\r\n   */\r\n  const changCurrentTask = (timestamp) => {\r\n    setCurrentTask(\r\n      toDoList.filter(\r\n        item => {\r\n          return item.timestamp === timestamp\r\n        }\r\n      )[0]\r\n    )\r\n  };\r\n\r\n\r\n  /**\r\n   * @description: Delete the task object according to timestamp passed by button acitons\r\n   * @param {Number} timestamp Timestamp of current task\r\n   */\r\n  const deleteTask = (timestamp) => {\r\n    setToDoList(toDoList.filter(\r\n      item => {\r\n        return item.timestamp !== timestamp\r\n      }\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Display to do list */}\r\n      <ul className=\"container\">\r\n        {toDoList.map((task, index) => {\r\n          return (\r\n            <ToDoItems\r\n              key={index}\r\n              task={task}\r\n              currentTask={currentTask}\r\n              changeIsComplete={changeIsComplete}\r\n              changCurrentTask={changCurrentTask}\r\n              changeTaskContent={changeTaskContent}\r\n              deleteTask={deleteTask}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nimport MyHeader from \"./components/Header\";\nimport MyInput from \"./components/Input\";\nimport MyList from \"./components/ToDoList\";\n\nfunction App() {\n  // state to store task info\n  const [toDoList, setToDoList] = useState([]);\n\n  // state to decide if the input box is shown\n  const [isInputShow, setIsInputShow] = useState(false);\n\n  /**\n   * @description: Add tasks to toDoList state, task obj is composed by content, isComplete flag and timestamp\n   * @param {String} value task contents\n   */\n  const addList = (value) => {\n    if (value === \"\") {\n      return;\n    } else {\n      let item = {\n        task: value,\n        isComplete: false,\n        timestamp: new Date().getTime(),\n        completeTimestamp: null,\n      };\n      setToDoList([item, ...toDoList]);\n    }\n  };\n  /**\n   * @description: Get to-do-list data stored in local storage\n   */\n  useEffect(() => {\n    const toDoData = JSON.parse(localStorage.getItem(\"toDoData\") || \"[]\");\n    setToDoList(toDoData);\n  }, []);\n  /**\n   * @description: Store to-do-list data to local storage\n   */\n  useEffect(() => {\n    localStorage.setItem(\"toDoData\", JSON.stringify(toDoList));\n  }, [toDoList]);\n\n  return (\n    <div className=\"App\">\n      {/* Header starts */}\n      <MyHeader setIsInputShow={setIsInputShow} isInputShow={isInputShow} />\n      {/* Header ends */}\n\n      {/* Show input box when plus button is triggered */}\n      {isInputShow ? (\n        <MyInput addList={addList} setIsInputShow={setIsInputShow} />\n      ) : (\n        \"\"\n      )}\n      {/* input box ends */}\n\n      {/* To do list starts */}\n      <MyList toDoList={toDoList} setToDoList={setToDoList} />\n      {/* To do list ends */}\n      <div className=\"reset container\">\n        <div className=\"row\">\n          <div className=\"col p-0 text-right\">\n            <button\n            className=\"btn btn-danger\"\n              onClick={() => {\n                if(window.confirm(\"Are you sure?\")){\n                  setToDoList([])\n                }\n              }}\n            >\n              Reset\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}